#!/bin/bash
echo "üöÄ Starting full-stack development environment..."

# Check if Docker is running
if ! docker ps &>/dev/null; then
    echo "‚ùå Docker is not running. Please start Docker first."
    exit 1
fi

# Build PHP image if needed
echo "üì¶ Building PHP Laravel image..."
docker compose build php_fpm

# Start all services
echo "üîÑ Starting all services..."
docker compose up -d

# Wait for services to be ready
echo "‚è≥ Waiting for services to start..."
sleep 15

# Check if Laravel needs setup
if [ ! -f backend/.env ] || ! grep -q "APP_KEY=base64:" backend/.env; then
    echo "üîß Setting up Laravel..."
    
    # Generate application key
    docker compose exec -T php_fpm php artisan key:generate --force || echo "‚ö†Ô∏è  Key generation failed, continuing..."
    
    # Install composer dependencies if vendor doesn't exist
    if [ ! -d "backend/vendor" ]; then
        echo "üì¶ Installing Composer dependencies..."
        docker compose exec -T php_fpm composer install --no-interaction --prefer-dist --optimize-autoloader || echo "‚ö†Ô∏è  Composer install failed, continuing..."
    fi
    
    # Run migrations
    echo "üóÑÔ∏è Running database migrations..."
    docker compose exec -T php_fpm php artisan migrate --force || echo "‚ö†Ô∏è  Migrations failed, continuing..."
    
    # Cache configurations
    docker compose exec -T php_fpm php artisan config:cache || echo "‚ö†Ô∏è  Config cache failed, continuing..."
    docker compose exec -T php_fpm php artisan route:cache || echo "‚ö†Ô∏è  Route cache failed, continuing..."
    
    # Set proper permissions
    docker compose exec -T php_fpm chown -R laravel:laravel /var/www/html/storage || echo "‚ö†Ô∏è  Permission setup failed, continuing..."
    docker compose exec -T php_fpm chown -R laravel:laravel /var/www/html/bootstrap/cache || echo "‚ö†Ô∏è  Permission setup failed, continuing..."
fi

echo "‚úÖ Development environment started!"
echo ""
echo "üìä Service Status:"
docker compose ps

echo ""
echo "üåê Access URLs:"
# Note: If URLs below show wrong ports, check actual ports with: docker compose ps
FRONTEND_PORT=$(grep "FRONTEND_PORT" docker-compose.yml | head -1 | sed 's/.*"\([0-9]*\):.*/\1/')
BACKEND_PORT=$(grep "BACKEND_PORT" docker-compose.yml | head -1 | sed 's/.*"\([0-9]*\):.*/\1/')

echo "  Frontend (Next.js): http://localhost:${FRONTEND_PORT:-8200}"
echo "  Backend (Laravel): http://localhost:${BACKEND_PORT:-8201}"
echo "  API Status: http://localhost:${BACKEND_PORT:-8201}/api/status"
echo ""
echo "üí° To verify actual ports, run: docker compose ps"
echo ""
echo "üìã Useful commands:"
echo "  docker compose logs -f          # View logs"
echo "  docker compose ps               # Check status"
echo "  docker compose down             # Stop services"
echo "  ./laravel-setup.sh              # Initialize Laravel fully"
